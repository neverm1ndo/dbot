{"version":3,"file":"public/scripts/chat.bundle.js","mappings":";;;;;;;;;;;;;;;;AAA0B;AACkB;AAC5C;AACA;AACA,oDAAoD,IAAI,GAAG,OAAO;AAClE,cAAc,2BAA2B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iDAAQ,wBAAwB,6CAAU,YAAY,6CAAU,YAAY,gDAAa,CAAC;AAC9F;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP,kFAAkF,cAAc,uBAAuB,6BAA6B;AACpJ,KAAK;AACL;AACA,sCAAsC,6CAAU,YAAY,6CAAU,YAAY,gDAAa;AAC/F;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA,mDAAmD,aAAa;AAChE;AACA;AACA;AACA,kBAAkB,yDAAsB;AACxC,OAAO;AACP;AACA;AACA;AACA,IAAI,qDAAkB;AACtB;AACA;AACA;AACA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;;;;;;;;;;ACjFM;AACF;AAC4D;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA,oDAAoD,IAAI;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,IAAI,4DAAyB,EAAE;AACnD,sBAAsB,qDAAkB;AACxC,wBAAwB,IAAI,qDAAkB,qBAAqB;AACnE,0BAA0B,qDAAkB;AAC5C,8BAA8B,qDAAkB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8BAA8B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iCAAiC;AACzD;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA,QAAQ,kDAAe;AACvB,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAAG,iBAAiB,4CAAG;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mBAAmB;AACzC;AACA;AACA;AACA,oCAAoC,gDAAa;AACjD;AACA,QAAQ,iDAAc,CAAC,6CAAU,YAAY,6CAAU,YAAY,gDAAa;AAChF,OAAO;AACP;AACA,QAAQ,6CAAU,CAAC,6CAAU,YAAY,6CAAU,YAAY,gDAAa;AAC5E,OAAO;AACP;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,oDAAoD;AACpD,MAAM,kDAAe,GAAG,kDAAe;AACvC,MAAM,kDAAe;AACrB,KAAK;AACL;AACA;AACA;AACA,6CAA6C,oDAAiB,EAAE,oDAAiB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+BAA+B;AACrD;AACA;AACA;AACA;AACA,oBAAoB,oBAAoB,OAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gEAA6B,wCAAwC,4DAAyB;AACrI,4CAA4C,OAAO;AACnD;AACA;AACA,sBAAsB,IAAI,2DAAwB,EAAE;AACpD,YAAY,oDAAiB;AAC7B;AACA,uIAAuI,oDAAiB;AACxJ;AACA;AACA;AACA,sBAAsB,IAAI,yDAAsB,EAAE;AAClD,YAAY,kDAAe;AAC3B;AACA,uIAAuI,kDAAe;AACtJ;AACA;AACA;AACA,sBAAsB,mBAAmB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAkB;AAC1B;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,IAAI,2DAAwB;AAC5B,sEAAsE,sDAAmB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,2BAA2B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,uDAAuD,uBAAuB,GAAG,0DAA0D;AAC3I;AACA,KAAK;AACL;AACA;AACA,IAAI,iDAAQ;AACZ,kEAAkE,0BAA0B;AAC5F;AACA,qCAAqC,6CAAU;AAC/C,qBAAqB,8CAAW;AAChC;AACA;AACA,oBAAoB,qDAAqD;AACzE;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA,IAAI,iDAAQ,yCAAyC,4BAA4B;AACjF,mCAAmC,6CAAU;AAC7C,mBAAmB,8CAAW;AAC9B,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,sBAAsB,4BAA4B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0CAA0C;AAClE;AACA;AACA;AACA;AACA;AACA,iEAAiE,oCAAoC;AACrG;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,6CAAU,CAAC,6CAAU,YAAY,6CAAU,YAAY,gDAAa;AACxE;AACA;AACA;AACA;AACA;AAC2H;;;;;;;;;;;;;;;;;;;;;;;;;;ACpavG;AACY;AACF;AACJ;AACA;;AAE1B;AACA,aAAa,oDAAW;AACxB,iBAAiB,oDAAW;AAC5B,UAAU,oDAAW;AACrB,OAAO,oDAAW;AAClB,WAAW,oDAAW;AACtB;;AAEO;;AAEA;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA,sCAAsC,uDAAgB,IAAI,gBAAgB;AAC1E,sCAAsC,kDAAW,IAAI,gBAAgB;AACrE,oCAAoC,gDAAS,IAAI,gBAAgB;AACjE,mCAAmC,8CAAO,IAAI,gBAAgB;AAC9D,wCAAwC,2DAAoB,IAAI,mBAAmB;;AAEnF;;AAEA;AACO,iBAAiB,qDAAc;AAC/B,wBAAwB,6DAAsB;AAC9C;AACA,iBAAiB,6CAAI;;AAE5B,mBAAmB,+CAAM;;AAEzB;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAI,iDAAQ,gDAAgD,GAAG;AAC/D;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA,iDAAQ,4CAA4C,0DAA0D;AAC9G;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,IAAI,iDAAQ,2DAA2D,eAAe;AACtF;AACA;AACA,KAAK;AACL,IAAI,iDAAQ,gCAAgC,0DAA0D;AACtG;AACA,CAAC;AACD;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA,GAAG;AACH;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B,CAAC;AACD;AACA;AACA,sBAAsB,SAAS,eAAe,wBAAwB;AACtE;AACA,CAAC;AACD;AACA,mBAAmB,SAAS,oBAAoB,UAAU,SAAS,iCAAiC;AACpG;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,mBAAmB,SAAS,kCAAkC,QAAQ;AACtE,CAAC;AACD;AACA,uBAAuB,QAAQ;AAC/B,CAAC;AACD;AACA;AACA,uBAAuB,uCAAuC;AAC9D,CAAC;AACD;AACA;AACA,uBAAuB,+CAA+C;AACtE,CAAC;AACD;AACA,mBAAmB,SAAS,kCAAkC,QAAQ;AACtE,CAAC;AACD;AACA,mBAAmB,SAAS,2BAA2B,UAAU;AACjE,CAAC;AACD;AACA,mBAAmB,SAAS,4BAA4B,QAAQ;AAChE,CAAC;AACD;AACA,mBAAmB,SAAS,4BAA4B,QAAQ;AAChE,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,mBAAmB,SAAS,6BAA6B,eAAe;AACxE,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;ACvMc;AACf;AACA;AACA,cAAc,6BAA6B,qCAAqC;AAChF;AACA;AACA;AACA;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,GAAG,EAAC;;;;;;;;;;;;;;;AC5EnB;AACA;AACA,mCAAmC,0CAA0C;AAC7E;AACA;AACA,MAAM;AACN,kCAAkC,gBAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;;ACjBgB;;AAEpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,6CAAU,OAAO,eAAe,OAAO,gDAAgD,KAAK,YAAY,OAAO,4CAA4C;AACrK;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,0CAAO,CAAC,GAAG,0CAAO,CAAC;AAClE,wBAAwB,6CAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;;AAEA,iEAAe,MAAM,EAAC;;;;;;;UC/EtB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNmB","sources":["webpack://omd/./src/public/scripts/bttv.js","webpack://omd/./src/public/scripts/chat.app.js","webpack://omd/./src/public/scripts/chat.js","webpack://omd/./src/public/scripts/cookies.js","webpack://omd/./src/public/scripts/hex.js","webpack://omd/./src/public/scripts/http.js","webpack://omd/./src/public/scripts/pubsub.js","webpack://omd/webpack/bootstrap","webpack://omd/webpack/runtime/define property getters","webpack://omd/webpack/runtime/hasOwnProperty shorthand","webpack://omd/webpack/runtime/make namespace object","webpack://omd/./src/public/scripts/index.js"],"sourcesContent":["import Http from './http';\r\nimport { params, user, chat } from './chat';\r\nclass BTTV {\r\n  bttvEmotes = {\r\n    urlTemplate: 'https://cdn.betterttv.net/emote/{{id}}/{{image}}',\r\n    scales: { 1: '1x', 2: '2x', 3: '3x' },\r\n    bots: [],\r\n    emoteCodeList: [],\r\n    emotes: [],\r\n    subEmotesCodeList: [],\r\n    allowEmotesAnyChannel: false\r\n  };\r\n  globalEmotes = {\r\n    emotes: []\r\n  }\r\n  constructor() {};\r\n  getEmotes() {\r\n    console.log('Getting BTTV emotes');\r\n    Http.get(`chat/emotes?channel=${params.has('channel')?params.get('channel'):user.username}`)\r\n    .then((data) => {\r\n      console.log('Got BTTV global emotes \\n', data);\r\n      this.bttvEmotes = this.bttvEmotes.emotes.concat(data.channel.emotes.map(function(n) {\r\n        n.global = true;\r\n        return n;\r\n      }));\r\n      this.globalEmotes = this.globalEmotes.emotes.concat(data.global.emotes.map(function(n) {\r\n        n.global = true;\r\n        return n;\r\n      }));\r\n      this.bttvEmotes.subEmotesCodeList = _.chain(this.bttvEmotes.emotes).where({ global: true }).reject(function(n) { return _.isNull(n.channel); }).pluck('code').value();\r\n    }).catch((err) => console.error)\r\n    .then(() => {\r\n      this.addEmotes(this.bttvEmotes, params.has('channel')?params.get('channel'):user.username);\r\n      this.addEmotes(this.globalEmotes, 'Global');\r\n    })\r\n  }\r\n  mergeEmotes(data, channel) {\r\n    console.log('Got BTTV emotes for ' + channel);\r\n    this.bttvEmotes.emotes = this.bttvEmotes.emotes.concat(data.emotes.map(function(n) {\r\n        if(!_.has(n, 'restrictions')) {\r\n          n.restrictions = {\r\n              channels: [],\r\n              games: []\r\n            };\r\n        }\r\n        if(n.restrictions.channels.indexOf(channel) == -1) {\r\n          n.restrictions.channels.push(channel);\r\n        }\r\n        return n;\r\n      }));\r\n    this.bttvEmotes.bots = this.bttvEmotes.bots.concat(data.bots.map(function(n) {\r\n      return {\r\n        name: n,\r\n        channel: channel\r\n      };\r\n    }));\r\n  }\r\n  addEmotes(emotes, titleof) {\r\n    const container = document.createElement('div');\r\n    const subcont = document.createElement('div');\r\n    const title = document.createElement('b');\r\n    title.innerText = 'BTTV ' + titleof;\r\n    for (let i = 0; i < emotes.length; i++) {\r\n      const img = document.createElement('img');\r\n      img.title = emotes[i].code;\r\n      img.classList.add('emote');\r\n      img.setAttribute('data-bs-toggle', 'tooltip');\r\n      img.setAttribute('data-bs-placement', 'top');\r\n      img.src = `https://cdn.betterttv.net/emote/${emotes[i].id}/1x`;\r\n      img.dataset.name = emotes[i].code;\r\n      img.dataset.id = emotes[i].id;\r\n      new bootstrap.Tooltip(img, {\r\n        boundary: chat.emotes.parentNode\r\n      });\r\n      subcont.append(img);\r\n    }\r\n    container.append(title, subcont);\r\n    chat.emotes.append(container, document.createElement('hr'));\r\n  }\r\n}\r\n\r\nexport default BTTV;\r\n","import Http from './http';\r\nimport HEX from './hex';\r\nimport { user, bttv, channelSets, chatterList, client, params, chat } from './chat';\r\n\r\nconst defaultBadges = {\r\n  'diktorbot': '/tank2.png',\r\n  'broadcaster': '/img/bc.png',\r\n  'moderator': '/img/cm.png',\r\n  'subscriber': '/img/sub.png',\r\n  'founder': '/img/sub.png',\r\n  'vip': '/img/vip.png',\r\n  'turbo': '/img/tur.png',\r\n  'verified': '/img/vf.png',\r\n  'prime': '/img/prime.png',\r\n};\r\n\r\nfunction timestamp (unix) {\r\n  const  date = new Date(unix);\r\n  let hours = date.getHours();\r\n  let minutes = \"0\" + date.getMinutes();\r\n  let seconds = \"0\" + date.getSeconds();\r\n  return hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\r\n}\r\nfunction haveLinks(text) {\r\n  return text.match(/(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/ig);\r\n}\r\nfunction linkify(text) {\r\n  var replacePattern1 = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim;\r\n  var replacedText = text.replace(replacePattern1, '<a href=\"$1\">$1</a>');\r\n  var replacePattern2 = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\r\n  var replacedText = replacedText.replace(replacePattern2, '$1<a href=\"http://$2\">$2</a>');\r\n  var replacePattern3 = /(\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,6})/gim;\r\n  var replacedText = replacedText.replace(replacePattern3, '<a href=\"mailto:$1\">$1</a>');\r\n  return replacedText;\r\n}\r\n\r\nclass ChatMessageBadge extends HTMLDivElement {\r\n  constructor(type, badges) {\r\n    super();\r\n    this.classList.add('badge-icon');\r\n    this.icon = new Image(20, 20);\r\n    this.icon.classList.add('badge-icon-img');\r\n    for (let i = 0; i < channelSets.badges.length; i++) {\r\n      if (type[0] === channelSets.badges[i].set_id) {\r\n        for (let j = 0; j < channelSets.badges[i].versions.length; j++) {\r\n          if (type[1] === channelSets.badges[i].versions[j].id) {\r\n              this.icon.src = channelSets.badges[i].versions[j].image_url_2x;\r\n              break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    if (!this.icon.src) {\r\n      const defaultBadgesKeys = Object.keys(defaultBadges);\r\n      for (let i = 0; i < defaultBadgesKeys.length; i++ ) {\r\n        if (type[0] === defaultBadgesKeys[i]) {\r\n          this.icon.src = defaultBadges[defaultBadgesKeys[i]];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (!this.icon.src) delete this.icon;\r\n    if (this.icon) {\r\n      this.append(this.icon);\r\n    }\r\n  }\r\n}\r\nclass YTFrame extends HTMLDivElement {\r\n  player;\r\n  constructor(url) {\r\n    super();\r\n    this.replace(url)\r\n  }\r\n  replace(url) {\r\n    const rep = document.createElement('div');\r\n    rep.id = String(url + Date.now()).hashCode();\r\n    this.append(rep);\r\n    setTimeout(() => {\r\n      new Promise((resolve) => {\r\n        this.player = new YT.Player(rep.id, {\r\n          videoId: YTFrame.getVideoID(url),\r\n          height: '100%',\r\n          width: '100%',\r\n          playerVars: { autoplay: 0, controls: 1, fs: 0 },\r\n          events: {\r\n            onReady: resolve\r\n          },\r\n        });\r\n      }).then((event) => {\r\n        event.target.setVolume(15);\r\n        chat.autoscroll();\r\n      });\r\n    }, 2000);\r\n  }\r\n  static getVideoID(url) {\r\n    const regExp = new RegExp(/^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#\\&\\?]*).*/);\r\n    const match = url.match(regExp);\r\n    return (match && match[7].length === 11) ? match[7] : console.warn('No YT video ID', match);\r\n  }\r\n}\r\nclass MessageControlButton extends HTMLButtonElement {\r\n  constructor(type, cb) {\r\n    super();\r\n    this.type = 'button';\r\n    this.classList.add('btn', type);\r\n    this.addEventListener('click', cb);\r\n  }\r\n}\r\nclass ChatMessage extends HTMLDivElement {\r\n  constructor(tags, message, self, date) {\r\n    super();\r\n    let splitter = ': ';\r\n    const color = tags.color?new HEX(tags.color):new HEX('FFFFFF');\r\n    this.body = document.createElement('div');\r\n    this.nickname = document.createElement('span');\r\n    this.tags = tags;\r\n    this.nickname.classList.add('nickname');\r\n    this.nickname.innerHTML = tags['display-name'];\r\n    this.nickname.style.color = color < 0x505050?color.brightness(70).contrast(30).toString():color.toString();\r\n    if (tags['message-type'] === \"action\") {\r\n      this.body.style.color = this.nickname.style.color;\r\n      splitter = '';\r\n    };\r\n    this.classList.add('card');\r\n    this.body.classList.add('card-body');\r\n    this.body.dataset.date = timestamp(date);\r\n    this.body.innerHTML = splitter + this.pretty(tags, message);\r\n    this.addTooltipsToEmotes();\r\n    this.body.prepend(this.nickname);\r\n    if (tags.badges) {\r\n      const badges = Object.entries(tags.badges);\r\n      if (tags.username === 'diktorbot') badges.push(['diktorbot', '1']);\r\n      for (let i = 0; i < badges.length; i+=1) {\r\n        this.body.prepend(new ChatMessageBadge(badges[i]));\r\n      }\r\n    }\r\n    if (!self && (tags.username !== user.username)) {\r\n      this.body.prepend(new MessageControlButton('btn-timeout', () => {\r\n        client.timeout(params.has('channel')?params.get('channel'):user.username, tags.username, 600, 'rediska');\r\n      }));\r\n      this.body.prepend(new MessageControlButton('btn-control', () => {\r\n        client.ban(params.has('channel')?params.get('channel'):user.username, tags.username);\r\n      }));\r\n    }\r\n    this.append(this.body);\r\n    if (haveLinks(message)) { // FIXME: remove unnecessary variable (links), fix condition\r\n      const links = haveLinks(message);\r\n      if (!YTFrame.getVideoID(links[0])) return;\r\n      this.body.appendChild(new YTFrame(links[0]));\r\n    }\r\n    this.nickname.addEventListener('click', () => { // ??? Exprerimental (may cause perfomance violation)\r\n      chat.text.value = chat.text.value + ' @' + tags.username + ' ';\r\n      chat.text.focus();\r\n    });\r\n  }\r\n\r\n  pretty(tags, message) {\r\n    let notice = message.includes('@')?'@' + user.display_name: user.display_name;\r\n    let splited = message.split(' ');\r\n    let result = [];\r\n    let position = 0;\r\n    let emotes = [];\r\n    let emoted = false;\r\n    for (let emote in tags.emotes) {\r\n      for (let i = 0; i < tags.emotes[emote].length; i++) {\r\n        let points = tags.emotes[emote][i].split('-');\r\n        emotes.push([emote, parseInt(points[0]), points[1] - points[0] + 1]);\r\n      }\r\n    }\r\n    for (let i = 0; i < splited.length; i++) { // FIXME\r\n      let emoted = false;\r\n      position+= splited[i].length + 1;\r\n      if (haveLinks(splited[i])) {\r\n        result.push(linkify(splited[i]));\r\n        continue;\r\n      }\r\n      if (splited[i].toLowerCase() === user.display_name.toLowerCase() || splited[i].toLowerCase() ==='@' + user.username.toLowerCase()) {\r\n        result.push(`<span class=\"notice\">${notice}</span>`);\r\n        continue;\r\n      }\r\n      for (let k = 0; k < bttv.globalEmotes.length; k++) {\r\n        if (bttv.globalEmotes[k].code === splited[i]) {\r\n          emoted = true;\r\n          result.push('<img data-bs-toggle=\"tooltip\" title=\"'+ splited[i] +'\" class=\"emoticon\" src=\"https://cdn.betterttv.net/emote/'+ bttv.globalEmotes[k].id +'/1x\">')\r\n        }\r\n      }\r\n      if (emoted) continue;\r\n      for (let k = 0; k < bttv.bttvEmotes.length; k++) {\r\n        if (bttv.bttvEmotes[k].code === splited[i]) {\r\n          emoted = true;\r\n          result.push('<img data-bs-toggle=\"tooltip\" title=\"'+ splited[i] +'\" class=\"emoticon\" src=\"https://cdn.betterttv.net/emote/'+ bttv.bttvEmotes[k].id +'/1x\">')\r\n        }\r\n      }\r\n      if (emoted) continue;\r\n      for (let j = 0; j < emotes.length; j++ ) {\r\n        if (position === emotes[j][1] + emotes[j][2] + 1) {\r\n          emoted = true;\r\n            result.push('<img data-bs-toggle=\"tooltip\" title=\"'+ splited[i] +'\" class=\"emoticon\" src=\"https://static-cdn.jtvnw.net/emoticons/v2/' + emotes[j][0] + '/default/dark/3.0\">');\r\n            break;\r\n        }\r\n      }\r\n      if (emoted) continue;\r\n      result.push(splited[i]);\r\n    }\r\n    return result.join(' ');\r\n  }\r\n\r\n  addTooltipsToEmotes() {\r\n    let tooltipTriggerList = [].slice.call(this.body.querySelectorAll('[data-bs-toggle=\"tooltip\"]'))\r\n    let tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\r\n      return new bootstrap.Tooltip(tooltipTriggerEl);\r\n    });\r\n  }\r\n}\r\n\r\nclass ChatAlert extends HTMLDivElement {\r\n  constructor(message, type = 'default', username = '') {\r\n    super();\r\n    const body = document.createElement('div');\r\n    this.classList.add('alert', 'mb-1');\r\n    switch (type) {\r\n      case 'success':\r\n      this.classList.add('bg-success', 'text-light');\r\n        break;\r\n      case 'ban':\r\n        this.classList.add('bg-warning', 'text-dark');\r\n        break;\r\n      case 'unban':\r\n        this.classList.add('bg-warning', 'text-dark');\r\n        break;\r\n      case 'danger':\r\n        this.classList.add('bg-danger', 'text-light');\r\n        break;\r\n      case 'siren':\r\n        this.classList.add('bg-danger', 'text-light', 'siren');\r\n        break;\r\n      case 'warning':\r\n        this.classList.add('bg-warning', 'text-dark');\r\n        break;\r\n      case 'info':\r\n        this.classList.add('bg-info', 'text-dark');\r\n        break;\r\n      default:\r\n        this.classList.add('text-muted');\r\n    }\r\n    this.innerHTML = message;\r\n    if (username) {\r\n      this.prepend(new MessageControlButton('btn-lurk', () => {\r\n        ChatAlert.addLurker(username);\r\n        chatterList.remove(username);\r\n        this.innerHTML = '<em>(<b>' + username + '</b> добавлен в черный список)</em>';\r\n      }));\r\n    }\r\n    this.append(body);\r\n  }\r\n  static addLurker(username) {\r\n    channelSets.lurkers.push(username);\r\n    window.localStorage.setItem('lurkers', JSON.stringify([...new Set(channelSets.lurkers)]));\r\n  }\r\n}\r\n\r\nclass ChattersListController {\r\n  dom = {\r\n    box: document.querySelector('#chatters-list'),\r\n    list: document.querySelector('#list'),\r\n    counter: document.querySelector('#chatters-counter'),\r\n    altCounter: document.querySelector('#chatters-counter-alt'),\r\n    buttons: {\r\n      open: document.querySelector('#open-chatters-list'),\r\n      close: document.querySelector('#close')\r\n    }\r\n  };\r\n  connected = [];\r\n  constructor() {\r\n    this.dom.buttons.close.addEventListener('click', () => {\r\n      this.close();\r\n    });\r\n    this.dom.buttons.open.addEventListener('click', () => {\r\n      this.open();\r\n      this.dom.list.innerHTML = '';\r\n      for (let i = 0; i < this.connected.length; i++) {\r\n        const li = document.createElement('li');\r\n        li.innerText = this.connected[i];\r\n        li.prepend(\r\n          new MessageControlButton('btn-lurk', () => {\r\n            ChatAlert.addLurker(this.connected[i]);\r\n            li.innerHTML = '<em>(<b>' + this.connected[i] + '</b> добавлен в черный список)</em>';\r\n            this.remove(this.connected[i]);\r\n            setTimeout(() => {\r\n              li.remove();\r\n            }, 3000);\r\n          }),\r\n        );\r\n        this.dom.list.append(li);\r\n      }\r\n    });\r\n  }\r\n  remove(username) {\r\n    this.connected.splice(this.connected.indexOf(username), 1);\r\n    this.dom.altCounter.innerText = this.connected.length;\r\n  }\r\n  add(username) {\r\n    this.connected.push(username);\r\n    this.dom.altCounter.innerText = this.connected.length;\r\n  }\r\n  open() {\r\n    this.dom.box.style.display = 'block';\r\n  }\r\n  close() {\r\n    this.dom.box.style.display = 'none';\r\n  }\r\n}\r\n\r\nclass ChatController {\r\n  constructor(selector) {\r\n    this.chat = document.querySelector(selector);\r\n    this.connected = false;\r\n    this.selfEmotes = {};\r\n    this.text = document.querySelector('#text');\r\n    this.submit = document.querySelector('#send');\r\n    this.emotes = document.querySelector(\"#emotes-list\");\r\n    this.submit.addEventListener('click', () => {\r\n      if (this.connected) this.send();\r\n    });\r\n    this.text.addEventListener('keydown', (event) => {\r\n      if (event.code === 'Enter') this.send();\r\n    });\r\n    this.text.addEventListener('input', (event) => {\r\n      if (this.text.value === '') {\r\n        this.selfEmotes = {};\r\n      }\r\n    });\r\n    this.emotes.addEventListener('click', (event) => {\r\n      if (event.target.tagName !== 'IMG') return;\r\n      if (typeof this.selfEmotes[event.target.dataset.id] !== 'object') {\r\n        this.selfEmotes[event.target.dataset.id] = [];\r\n      }\r\n      this.selfEmotes[event.target.dataset.id].push(`${this.text.value.length}-${this.text.value.length + event.target.dataset.name.length}`);\r\n      this.text.value = this.text.value + ' ' + event.target.dataset.name + ' ';\r\n    });\r\n  }\r\n  getEmoteSet(id) {\r\n    Http.get(\r\n      `https://api.twitch.tv/helix/chat/emotes/set?emote_set_id=${id.join('&emote_set_id=')}`,\r\n      {\r\n        'Authorization': 'Bearer ' + user.token,\r\n        'Client-ID': user.client\r\n      }\r\n    )\r\n    .then(data => { if (data.data.length > 0) this.addEmotes(data.data);})\r\n    .catch(err => console.error);\r\n  }\r\n  addEmotes(emotes) {\r\n    const owners = {};\r\n    let streamers = new Set();\r\n    for (let i = 0; i < emotes.length; i++) {\r\n      if (emotes[i].owner_id !== 'twitch' && emotes[i].owner_id !== '0') streamers.add(emotes[i].owner_id);\r\n      if (!owners[emotes[i].owner_id]) owners[emotes[i].owner_id] = [];\r\n      owners[emotes[i].owner_id].push(emotes[i]);\r\n    }\r\n    Http.get(`https://api.twitch.tv/helix/users?id=${[...streamers].join('&id=')}`, {\r\n      'Authorization': 'Bearer ' + user.token,\r\n      'Client-ID': user.client\r\n    }).then((ownersInfo) => {\r\n      ownersInfo.data.push({\r\n        id: '0',\r\n        display_name: 'Whole World'\r\n      })\r\n      for (let i = 0; i < ownersInfo.data.length; i++) {\r\n        const container = document.createElement('div');\r\n        const subcont = document.createElement('div');\r\n        const title = document.createElement('b');\r\n        let avatar;\r\n        if (ownersInfo.data[i].profile_image_url) {\r\n          avatar = new Image(20, 20);\r\n          avatar.classList.add('avatar');\r\n          avatar.src = ownersInfo.data[i].profile_image_url;\r\n        }\r\n        title.innerHTML = ownersInfo.data[i].display_name;\r\n        for (let j = 0; j < owners[ownersInfo.data[i].id].length; j++) {\r\n          const img = document.createElement('img');\r\n          img.title = owners[ownersInfo.data[i].id][j].name;\r\n          img.classList.add('emote');\r\n          img.setAttribute('data-bs-toggle', 'tooltip');\r\n          img.setAttribute('data-bs-placement', 'top');\r\n          img.src = `https://static-cdn.jtvnw.net/emoticons/v2/${owners[ownersInfo.data[i].id][j].id}/default/light/3.0`;\r\n          img.dataset.name = owners[ownersInfo.data[i].id][j].name;\r\n          img.dataset.id = owners[ownersInfo.data[i].id][j].id;\r\n          new bootstrap.Tooltip(img, {\r\n            boundary: this.emotes.parentNode\r\n          });\r\n          container.append(title, avatar?avatar:'', subcont);\r\n          subcont.append(img);\r\n        }\r\n        this.emotes.append(container, document.createElement('hr'));\r\n      }\r\n    }).catch((err) => console.log(err))\r\n  }\r\n  add(tags, message, self, date = Date.now()) {\r\n    this.chat.append(new ChatMessage(tags, message, self, date));\r\n    this.autoscroll();\r\n  }\r\n  alert(message, type, username) {\r\n    this.chat.append(new ChatAlert(message, type, username));\r\n    this.autoscroll();\r\n  }\r\n  autoscroll () {\r\n    this.chat.parentElement.scrollTop = this.chat.parentElement.scrollHeight;\r\n  }\r\n  pseudoDelete(username) {\r\n    const childs = this.chat.childNodes;\r\n    for (let i = 0; i < childs.length; i += 1) {\r\n      if (childs[i].className === 'card') {\r\n        if (childs[i].tags.username === username) {\r\n          childs[i].body.classList.add('text-decoration-line-through', 'pseudo-delete');\r\n        }\r\n      }\r\n    }\r\n  }\r\n  send() {\r\n    if (!this.text.value) return;\r\n    client.say(params.has('channel')?params.get('channel'):user.username, this.text.value);\r\n    this.text.value = '';\r\n    this.selfEmotes = {};\r\n  }\r\n}\r\n\r\nexport { ChatAlert, ChatMessage, ChatController, ChattersListController, YTFrame, MessageControlButton, ChatMessageBadge };\r\n","import {\n  ChatController,\n  ChattersListController,\n  ChatMessageBadge,\n  ChatMessage,\n  ChatAlert,\n  YTFrame,\n  MessageControlButton\n} from './chat.app';\nimport Cookies from './cookies';\nimport PubSub from './pubsub';\nimport Http from './http';\nimport BTTV from './bttv';\n\nclass User {\n  username = Cookies.get('nmnd_user_login');\n  display_name = Cookies.get('nmnd_user_display_name');\n  token = Cookies.get('nmnd_user_access_token');\n  id = Cookies.get('nmnd_user_id');\n  client = Cookies.get('nmnd_app_client_id');\n};\n\nexport const user = new User();\n\nexport const channelSets = {\n  badges: [],\n  lurkers: [],\n  sets: new Set(),\n  id: user.id,\n}\n\nconst tag = document.createElement('script');\ntag.src = 'https://www.youtube.com/player_api';\nconst firstScriptTag = document.getElementsByTagName('script')[0];\nfirstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n\n//** Define custom HTML elements **//\n\ncustomElements.define('twitch-badge', ChatMessageBadge, { extends: 'div' });\ncustomElements.define('chat-message', ChatMessage, { extends: 'div' });\ncustomElements.define('chat-alert', ChatAlert, { extends: 'div' });\ncustomElements.define('yt-player', YTFrame, { extends: 'div' });\ncustomElements.define('control-button', MessageControlButton, { extends: 'button' });\n\n//*******************************//\n\nconst parser = new DOMParser();\nexport const chat = new ChatController('#chat');\nexport const chatterList = new ChattersListController();\nexport const params = new URLSearchParams(window.location.search);\nexport const bttv = new BTTV(params);\n\nconst pubsub = new PubSub();\n\nbttv.getEmotes();\npubsub.connect();\n\nlet trigger = 0;\n\n// if (params.has('channel')) {\nfunction handleStreamInfo(id) {\n  setInterval(() => {\n    Http.get(`https://api.twitch.tv/helix/streams?user_id=${id}`, {\n      'Authorization': 'Bearer ' + user.token,\n      'Client-ID': user.client\n    }).then((data) => {\n      if (data.data[0]) {\n        chatterList.dom.counter.innerHTML = data.data[0].viewer_count;\n      }\n    })\n  }, 120000);\n}\nHttp.get(`https://api.twitch.tv/helix/users?login=${params.has('channel')?params.get('channel'):user.username}`, {\n  'Authorization': 'Bearer ' + user.token,\n  'Client-ID': user.client\n}).then((data) => {\n  channelSets.id = data.data[0].id;\n  handleStreamInfo(channelSets.id);\n  return Promise.all([\n    Http.get(`https://api.twitch.tv/helix/chat/badges?broadcaster_id=${channelSets.id}`, {\n      'Authorization': 'Bearer ' + user.token,\n      'Client-ID': user.client\n    }),\n    Http.get(`/controls/chat/last?channel=${params.has('channel')?params.get('channel'):user.username}`),\n  ])\n}).then(([badges, lastMessages]) => {\n  channelSets.badges = badges.data;\n  lastMessages.forEach((message) => {\n    chat.add(message.tags, message.message, message.self, message.date);\n  });\n}).catch((err) => console.error(err));\n\nif (window.localStorage.getItem('lurkers')) {\n  channelSets.lurkers = [...new Set(...[JSON.parse(window.localStorage.getItem('lurkers')), channelSets.lurkers])];\n  JSON.parse(window.localStorage.getItem('lurkers')).forEach((lurker, index, arr) => {\n    if (Array.isArray(lurker)) {\n      channelSets.lurkers.splice(channelSets.lurkers.indexOf(lurker), 1);\n    }\n  })\n  window.localStorage.setItem('lurkers', JSON.stringify(channelSets.lurkers));\n}\n\nexport const client = new tmi.Client({\n  options: {\n    debug: true,\n    messagesLogLevel: \"info\",\n    clientId: user.client,\n    skipUpdatingEmotesets: true\n  },\n  connection: { reconnect: true, secure: true },\n  identity: {\n    username: user.username,\n    password: 'oauth:' + user.token\n  },\n  channels: [params.has('channel')?params.get('channel'):user.username]\n});\n\nclient.connect();\nclient.on('connected', (channel, self) => {\n  chat.alert('Добро пожаловать в чат!');\n  chat.connected = true;\n  chat.submit.disabled = false;\n});\nclient.on('disconnected', (channel, self) => {\n  chat.alert('Вы отсоединенны от чата', 'siren');\n  chat.connected = false;\n  chat.submit.disabled = true;\n});\nclient.on('join', (channel, username, self) => {\n  if (self || chatterList.connected.includes(username) || channelSets.lurkers.includes(username)) return;\n  chatterList.add(username);\n  chat.alert(`<b>${username}</b> подключился к чату`, 'success', username);\n});\nclient.on('ban', (channel, username, reason, userstate) => {\n  // Replaced with PubSub event handler\n  // chat.alert(`<b>${username}</b> забанен ${reason?': ' + reason:''}`, 'warning');\n  chat.pseudoDelete(username);\n});\nclient.on('timeout', (channel, username, reason, duration, userstate) => {\n  chat.alert(`<b>${username}</b> отстранен на ${duration} секунд ${reason?'по причине ' + reason:''}`, 'warning');\n  chat.pseudoDelete(username);\n});\nclient.on('part', (channel, username, self) => {\n  if (self || channelSets.lurkers.includes(username)) return;\n  setTimeout(() => {\n    if (chatterList.connected.includes(username)) {\n      chatterList.remove(username);\n      chat.alert(`<b>${username}</b> отключился`, 'danger', username);\n    }\n  }, 180000);\n});\nclient.on('chat', (channel, tags, message, self) => {\n  if (self) {\n    tags.emotes = chat.selfEmotes;\n    chat.add(tags, message, self);\n    return;\n  }\n  chat.add(tags, message, self);\n});\nclient.on('subscription', (channel, username, methods, message, userstate) => {\n  chat.alert(`<b>${username}</b> оформил подписку<br><small>${message}</small>`, 'info');\n});\nclient.on('notice', (channel, msgid, message) => {\n  chat.alert(`<small>${message}</small>`);\n});\nclient.on('vips', (channel, vips) => {\n  vips = vips.join('</br>');\n  chat.alert(`<small>${vips.length > 0?vips:'Список VIP пуст'}</small>`);\n});\nclient.on('mods', (channel, mods) => {\n  mods = mods.join('</br>');\n  chat.alert(`<small>${mods.length > 0?mods:'Список модераторов пуст'}</small>`);\n});\nclient.on('resub', (channel, username, methods, message, userstate) => {\n  chat.alert(`<b>${username}</b> оформил подписку<br><small>${message}</small>`, 'info');\n});\nclient.on('subgift', (channel, username, streakMonths, recepient, methods, userstate) => {\n  chat.alert(`<b>${username}</b> подарил подписку <u>${recepient}</u>`, 'info');\n});\nclient.on('raided', (channel, username, viewers) => {\n  chat.alert(`<b>${username}</b> зарейдил канал на <b>${viewers}</b> зрителей`, 'info');\n});\nclient.on('hosted', (channel, username, viewers, autohost) => {\n  chat.alert(`<b>${username}</b> захостил канал на <b>${viewers}</b> зрителей`, 'info');\n});\nclient.on('whisper', (channel, tags, message, self) => {\n  chat.add(tags, message, self);\n});\nclient.on('clearchat', (channel) => {\n  chat.alert('Чат был очищен');\n});\nclient.on('cheer', (channel, userstate, message) => {\n  chat.alert(`<b>${username}</b> поддержал канал на <b>${userstate.bits}</b> Cheers`, 'info');\n});\nclient.on('emotesets', (sets, obj) => {\n  if (trigger > 0) return;\n  trigger++;\n  chat.getEmoteSet(sets.split(','));\n});\n","export default class Cookies {\r\n  static get(name) {\r\n    let matches = document.cookie.match(new RegExp(\r\n      \"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"\r\n    ));\r\n    return matches ? decodeURIComponent(matches[1]) : undefined;\r\n  }\r\n}\r\n","class HEX {\r\n  constructor(color) {\r\n    if (typeof color !== 'string') throw console.error(Error(color + ' is not a string!'));\r\n    if (color.startsWith('#')) color = color.substr(1);\r\n    this.color = parseInt(color, 16);\r\n    this.r = parseInt(color.substr(0, 2), 16);\r\n    this.g = parseInt(color.substr(2, 2), 16);\r\n    this.b = parseInt(color.substr(4, 2), 16);\r\n  }\r\n  setSpecters() {\r\n    this.r = parseInt(this.toString().substr(0, 2), 16);\r\n    this.g = parseInt(this.toString().substr(2, 2), 16);\r\n    this.b = parseInt(this.toString().substr(4, 2), 16);\r\n  }\r\n  setColor() {\r\n    this.color = parseInt(this.toString().substr(1), 16);\r\n  }\r\n  blend(hex) {\r\n    if (!(hex instanceof HEX)) {\r\n      throw console.error(Error(hex + ' is not a HEX instance!'));\r\n    }\r\n    this.color = this.color + hex.color;\r\n    this.setSpecters();\r\n    return this;\r\n  }\r\n  toString() {\r\n    const c = {\r\n      r: this.r.toString(16),\r\n      g: this.g.toString(16),\r\n      b: this.b.toString(16)\r\n    };\r\n    const result = '#' + ('0').repeat(2 - c.r.length) + c.r + ('0').repeat(2 - c.g.length) + c.g + ('0').repeat(2 - c.b.length) + c.b;\r\n    return result;\r\n  }\r\n  valueOf() {\r\n    return this.color;\r\n  }\r\n  saturation(amount) {\r\n    amount = amount/100;\r\n    if (amount < 0) {\r\n      console.warn('Saturation percentage must be more than 0', amount);\r\n      return this;\r\n    }\r\n    const gray = this.r * 0.3086 + this.g * 0.6094 + this.b * 0.0820;\r\n    this.r = Math.round(this.r * amount + gray * (1-amount));\r\n    this.g = Math.round(this.g * amount + gray * (1-amount));\r\n    this.b = Math.round(this.b * amount + gray * (1-amount));\r\n    this.setColor();\r\n    return this;\r\n  }\r\n  contrast(amount) {\r\n    amount = amount/100;\r\n    if (amount < 0) {\r\n      return this;\r\n    }\r\n    const col = Math.max.apply(null, [this.r, this.g, this.b]);\r\n    this.r = Math.min(255, Math.round((this.r/col)*this.r + (amount*col)));\r\n    this.g = Math.min(255, Math.round((this.g/col)*this.g + (amount*col)));\r\n    this.b = Math.min(255, Math.round((this.b/col)*this.b + (amount*col)));\r\n    this.setColor();\r\n    return this;\r\n  }\r\n  brightness(amount) {\r\n    amount = amount/100;\r\n    if (amount < 0) {\r\n      console.warn('Brightness percentage must be more than 0', amount);\r\n      return this;\r\n    }\r\n    this.r = Math.min(255,Math.floor(this.r + 255 - (amount*255)));\r\n    this.g = Math.min(255,Math.floor(this.g + 255 - (amount*255)));\r\n    this.b = Math.min(255,Math.floor(this.b + 255 - (amount*255)));\r\n    this.setColor();\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default HEX;\r\n","class Http {\n  static async get(url, headers, mode = 'cors') {\n    const res = await fetch(url, { method: 'GET', headers, cache: 'default' })\n      if (res.ok) {\n       return await res.json();\n    } else {\n      alert.error(`Ошибка HTTP: ${this.res.status}`);\n    }\n  }\n  static async post(url, data) {\n    const res= await fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n    return await res.json();\n  }\n}\nexport default Http;\n","import { chat, user } from './chat';\n\nconst _SCOPE = 'user_read+chat_login';\n\nclass PubSub {\n  ws\n  moderation_actions = {\n    'unban': 'разбанил',\n    'ban': 'забанил'\n  }\n  constructor() {}\n  connect() {\n    const heartbeatInterval = 1000 * 60;\n    const reconnectInterval = 1000 * 3;\n    let heartbeatHandle;\n    this.ws = new WebSocket('wss://pubsub-edge.twitch.tv');\n    this.ws.onopen = (event) => {\n        console.log('[PUBSUB] INFO: Socket Opened')\n        this.heartbeat();\n        heartbeatHandle = setInterval(() => {\n          this.heartbeat();\n        }, heartbeatInterval);\n        this.listen();\n    };\n    this.ws.onerror = (error) => {\n        console.error('[PUBSUB] ERR:  ' + JSON.stringify(error) + '\\n');\n    };\n    this.ws.onmessage = (event) => {\n        const message = JSON.parse(event.data);\n        console.log('[PUBSUB] RECV: ' + JSON.stringify(message) + '\\n');\n        if (message.type == 'MESSAGE') {\n          const msg = JSON.parse(message.data.message).data;\n          if (!this.moderation_actions[msg.moderation_action]) return;\n          chat.alert(`<b>${msg.created_by}</b> ${this.moderation_actions[msg.moderation_action]} <b>${msg.args[0]}</b> ${msg.args[1]?'по причине: ' + msg.args[1]:''}`, msg.moderation_action);\n        }\n        if (message.type == 'RECONNECT') {\n            console.log('[PUBSUB] INFO: Reconnecting...\\n');\n            setTimeout(() => {\n              this.connect()\n            }, reconnectInterval);\n        }\n    };\n    this.ws.onclose = () => {\n        console.log('[PUBSUB] INFO: Socket Closed\\n');\n        clearInterval(heartbeatHandle);\n        console.log('[PUBSUB] INFO: Reconnecting...\\n');\n        setTimeout(() => {\n          this.connect()\n        }, reconnectInterval);\n    };\n  }\n  heartbeat() {\n    const message = {\n        type: 'PING'\n    };\n    this.ws.send(JSON.stringify(message));\n  }\n  listen() {\n    const message = {\n        type: 'LISTEN',\n        nonce: nonce(15),\n        data: {\n            topics: [`chat_moderator_actions.${user.id}.${user.id}`],\n            auth_token: user.token\n        }\n    };\n    console.log('[PUBSUB] SENT: ' + JSON.stringify(message) + '\\n');\n    this.ws.send(JSON.stringify(message));\n  }\n}\nfunction nonce(length) {\n    let text = \"\";\n    let possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (let i = 0; i < length; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\n\nexport default PubSub;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import './chat.js';\r\n"],"names":[],"sourceRoot":""}